import java.io.*;
import java.util.*;

import org.jgraph.graph.DefaultEdge;
import org.jgrapht.*;
import org.jgrapht.alg.VertexCovers;
import org.jgrapht.graph.DefaultWeightedEdge;
import org.jgrapht.graph.ListenableUndirectedWeightedGraph;
import org.jgrapht.graph.SimpleGraph;
import org.jgrapht.graph.SimpleWeightedGraph;

public class assingment4 {
	public static void main(String [] args) throws IOException{
	//public void main()throws IOException{
		BufferedReader br = null;
		BufferedReader brPassTwo = null;

		String pathName = "graph.txt";
		int distance = 1002;
		//int distance = 30;
		int number = 30;
		
		int max = 0;
		int vertexMax = 0;
		SimpleGraph<Integer, DefaultWeightedEdge> g = new SimpleWeightedGraph<Integer, DefaultWeightedEdge>(DefaultWeightedEdge.class);
		Set<Integer> minCover = new TreeSet<Integer>();
		
		//read in input
		try {
			br = new BufferedReader(new FileReader(pathName));
			String input;
			int vertex = 0;
			while ((input = br.readLine()) != null){				
					g.addVertex(vertex);
					vertex++;			
			}		
			brPassTwo = new BufferedReader(new FileReader(pathName));
			vertex = 0;
			while ((input = brPassTwo.readLine()) != null){
				input.trim();
				String splitOnSpace [] = input.split("\\s");
				int weight = 2;
				int edge = 1;
				for(int i = 0; i < splitOnSpace.length / 2; i++){
					if(Integer.parseInt(splitOnSpace[edge]) !=0){
						DefaultWeightedEdge e = g.addEdge(vertex, 
								Integer.parseInt(splitOnSpace[edge]));
						if(e!=null){
	 						g.setEdgeWeight(e, Integer.parseInt(splitOnSpace[weight]));
	 					}
					}
					weight += 2;
					edge += 2;
				}
				vertex++;
			}
			
			Set<Integer> vertexList = g.vertexSet();

			System.out.println("Total Vertecies: " + vertexList.toArray().length);

			
			
			
			
//			StringTokenizer st1 = new StringTokenizer(input,"x");
//	 		for(int i=0; st1.hasMoreElements();i++){
//	 			String s1 = st1.nextToken();
//	 			if (i==0){
//	 				String s = new String(s1);
//	 				StringTokenizer st2 = new StringTokenizer(s,",");
//		 			for(int k = 0; st2.hasMoreElements();k++){
//		 				String sub = st2.nextToken();
//		 				g.addVertex(k);
//		 		}
//		 		}
//		 		StringTokenizer st3 = new StringTokenizer(s1,",");
//		 		int vertexBigEdge = 0;
//	 			for(int j = 0; st3.hasMoreElements();j++){
//	 				
//	 				int weight = Integer.parseInt(st3.nextToken());
//	 				if(weight!=0){
//	 					DefaultWeightedEdge e = g.addEdge(i, j);
//	 					if(e!=null){
//	 						g.setEdgeWeight(e, weight);}
//	 					if(weight > distance){
//	 						vertexBigEdge++;
//	 						}
//	 				}//end if weight !=0
//	 				
//	 			
//	 			}//end inner for
// 			
//	 		}//end outer for
	 		
	 	} //End try
		finally {
			try {
				if (br != null)
					br.close();} 
			catch (IOException ex) {
				ex.printStackTrace();}
		}//End finally
		System.out.println("done create graph");
		
//		List<Boolean> markedVertex= new ArrayList<Boolean>();
//		List<Integer> vertexList= new ArrayList<Integer>();
//		Set<Integer> vertexSet = g.vertexSet();
//		for(int i =0; i < number; i++){
//			Boolean e=false;
//			markedVertex.add(i,e);
//			vertexList.add(i);
//		}
//		
//		shuffleList(vertexList);
//		for(int i = 0; i < number; i ++){
//			
//			if(!markedVertex.get(i)){
//				markedVertex.set(i, true);
//				minCover.add(i);
//				Set<DefaultWeightedEdge> edge = g.edgesOf(i);
//				Iterator<DefaultWeightedEdge> edgeItr = edge.iterator();
//				while(edgeItr.hasNext()){
//					DefaultWeightedEdge e = edgeItr.next();
//					double edgeWeight = g.getEdgeWeight(e);
//					if (edgeWeight <= distance){
//						int source = g.getEdgeSource(e);
//						int target = g.getEdgeTarget(e);
//						markedVertex.set(source, true);
//						markedVertex.set(target, true);
//					}
//				}//end while
//			}//end if mark
//		}//end for
//		
//		 StringBuilder s = new StringBuilder();
//		System.out.println("# station: " + minCover.size());
//		Iterator<Integer> itr = minCover.iterator();
//		while(itr.hasNext()){
//			Integer i = itr.next();
//			s.append(i + "x");
//		}
//		
//		//write output greedy algorithm into file 
//		 
//			File file = new File("Assignment4.txt");
//
//			// if file doesnt exists, then create it
//			if (!file.exists()) {
//				file.createNewFile();}
//
//			FileWriter fw = new FileWriter(file.getAbsoluteFile());
//			BufferedWriter bw = new BufferedWriter(fw);
//			bw.write(s.toString());
//			bw.close();

			

		
		
	}//end main
	
	public static void shuffleList(List<Integer> a) {
	    int n = a.size();
	    Random random = new Random();
	    random.nextInt();
	    for (int i = 0; i < n; i++) {
	      int change = i + random.nextInt(n - i);
	      swap(a, i, change);
	    }
	  }

	  private static void swap(List<Integer> a, int i, int change) {
	    int helper = a.get(i);
	    a.set(i, a.get(change));
	    a.set(change, helper);
	  }
}
